{"/Users/Terry/Coding/Personal/ElasticChildProtection/app/pages/css/styles.js":{"size":162,"mtime":1487175646000,"hashOfConfig":"1yiy6r5","results":{"filePath":"/Users/Terry/Coding/Personal/ElasticChildProtection/app/pages/css/styles.js","messages":[],"errorCount":0,"warningCount":0,"output":"require('./header.less');\nrequire('./footer.less');\nrequire('./login.less');\nrequire('./global.less');\nrequire('./homePage.less');\nrequire('./react-select.less');\n"}},"/Users/Terry/Coding/Personal/ElasticChildProtection/app/redux/core-reducer.js":{"size":849,"mtime":1487331207000,"hashOfConfig":"1yiy6r5","results":{"filePath":"/Users/Terry/Coding/Personal/ElasticChildProtection/app/redux/core-reducer.js","messages":[],"errorCount":0,"warningCount":0,"output":"\nimport { combineReducers } from 'redux';\nimport reducer from './input-reducer';\n\n/**\n * combineReducers is important to understand. As your app might grow in size\n * and complexity, you will likely begin to split your reducers into separate\n * functions - with each one managing a separate slice of the state! This helper\n * function from 'redux' simply merges the reducers. Keep in mind we are using\n * the ES6 shorthand for property notation.\n *\n * If you're transitioning from Flux, you will notice we only use one store, but\n * instead of relying on multiple stores to manage diff parts of the state, we use\n * various reducers and combine them.\n *\n * More info: http://rackt.org/redux/docs/api/combineReducers.html\n */\nconst rootReducer = combineReducers({\n  reducer, // you might be used to: counter: counter,\n});\n\nexport default rootReducer;\n"}},"/Users/Terry/Coding/Personal/ElasticChildProtection/app/redux/input-action.js":{"size":216,"mtime":1487430106000,"hashOfConfig":"1yiy6r5","results":{"filePath":"/Users/Terry/Coding/Personal/ElasticChildProtection/app/redux/input-action.js","messages":[],"errorCount":0,"warningCount":0,"output":"\nexport function resetFields() {\n  return {\n    type: 'CLEAR_FIELDS'\n  };\n}\n\nexport const updateFields = newInput => ({\n  type: 'UPDATE_FIELDS',\n  payload: {\n    inputValues: newInput,\n  }\n});\n"}}}